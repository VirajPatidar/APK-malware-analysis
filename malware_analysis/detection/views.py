# Create your views here.
import os
from datetime import datetime
from pytz import timezone

from django.shortcuts import render
from .models import File
from rest_framework.views import APIView
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.response import Response
from rest_framework import status
from .serializers import FileSerializer

import logging

from androguard.misc import AnalyzeAPK
from pprint import pprint
import json

from django.conf import settings
from pathlib import Path
from .analyze import analyze

class FileView(APIView):
  parser_classes = (MultiPartParser, FormParser)

  def post(self, request, *args, **kwargs):
    file_serializer = FileSerializer(data=request.data)
    if file_serializer.is_valid():
      file_serializer.save()
      record = File.objects.latest('timestamp')
      filename = str(record.file)
      
      last_scanned = []
      last_result = []

      try:
        q = File.objects.filter(file=filename).order_by('-timestamp')
        logging.warning(q)
        logging.warning(q.count())
        logging.warning(type(q))
        for i in range(1, 6):
          if(i > (q.count()-1)):
            break
          ls = q[i].timestamp
          last_scanned.append(str(ls.astimezone(timezone('Asia/Kolkata'))))
          last_result.append(q[i].is_malware)
        
        logging.warning(last_scanned)
        logging.warning(last_result)

      except IndexError as e:
        logging.warning(e)

      apk_folder_path = Path(settings.MEDIA_ROOT)
      file_to_open = apk_folder_path / filename
      
      logging.warning(file_to_open)
      
      isMalware, found_package, found_permissions, found_combination, permission_data = analyze(file_to_open)

      logging.warning(isMalware)

      record.is_malware = isMalware
      record.save()
      
      if os.path.exists(file_to_open):
        os.remove(file_to_open)
      else:
        logging.warning("The file does not exist")

      logging.warning(record.is_malware)
      logging.warning(file_serializer.data)
      
      return Response({
                        "file": str(record.file),
                        "timestamp": str(record.timestamp),
                        "is_malware": str(record.is_malware),
                        "last_scanned": last_scanned,
                        "last_result": last_result,
                        "package": found_package,
                        "permissions": found_permissions,
                        "combination": found_combination,
                        "permission_data": permission_data
                      }, status=status.HTTP_201_CREATED)
    else:
      return Response(file_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
import React from 'react';
import { useState } from 'react';
import axios from 'axios';

import Navbar from './Navbar.js';

import Grid from '@material-ui/core/Grid';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import Button from '@material-ui/core/Button';
import CloudUploadIcon from '@material-ui/icons/CloudUpload';
import GetAppIcon from '@material-ui/icons/GetApp';
import AssessmentOutlinedIcon from '@material-ui/icons/AssessmentOutlined';

import { Input } from '@material-ui/core';
import CircularProgress from '@material-ui/core/CircularProgress';
import Container from '@material-ui/core/Container';
import Box from '@material-ui/core/Box';

import BasicTable from './BasicTable.js';

import { jsPDF } from "jspdf";

const useStyles = makeStyles((theme) => ({
  root: {
    flexGrow: 1,
  },
  menuButton: {
    marginRight: theme.spacing(2),
  },
  customColor: {
    background : '#00796b',
  },
  title: {
    flexGrow: 1,
  },
  header: {
    color: '#00796b',
    fontSize: '1.4rem',
  },
  button: {
    margin: theme.spacing(1),
  },
  input: {
    display: "none",
  },
}));

const Dashboard = () => {

    const classes = useStyles();

    const [file, setFile] = useState(null);
    const [response, setResponse] = useState(null);
    const [loading, setLoading] = useState(false);
    
    const handleChange = (e) => {
        setResponse(false);
        setFile(e.target.files[0]);
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if(file) {
          if(file.type !== "application/vnd.android.package-archive") {
            alert("Please chooose an APK file !!");
            window.location.reload();
          }
          else {
            let form_data = new FormData();
            setLoading(true);
            form_data.append('file', file);
            let url = 'http://localhost:8000/detect/upload';
            axios.post(url, form_data, {
                headers: {
                    'content-type': 'multipart/form-data'
                }
            })
            .then(res => {
                setResponse(res.data);
                setLoading(false);
            })
            .catch(err => console.log(err))
          };
        }
        else {
          alert("Please choose a file!");
          window.location.reload();
        }
    }

    const generatePDF = () => {
      // const divToDisplay = document.getElementById('response');
      // html2canvas(divToDisplay, {scrollY: -window.scrollY}).then(function(canvas) {

        // var wid
        // var hgt
        // const divImage = canvas.toDataURL("image/png", wid = canvas.width, hgt = canvas.height);
        // var hratio = hgt/wid
        const pdf = new jsPDF("p","pt","a4");
        var x = 45;
        // var width = pdf.internal.pageSize.width;    
        // var height = width * hratio
        pdf.setFontSize(18);
        pdf.setFont("helvetica", "bold");
        pdf.text("Malware Analysis Report", 180, 40);
        pdf.setFont("times", "italic");
        pdf.setFontSize(16);
        pdf.text("File Name: ", 40, 40 + x);

        var longString1 = file.name;
        var splitText1 = pdf.splitTextToSize(longString1, 400)

        for (var y = 0, length1 = splitText1.length; y < length1; y++) {
          pdf.text(splitText1[y], 115, 40 + x);
          x = x + 20;
        }
        x = x + 10;

        pdf.text("File Type: "+file.type, 40, 40 + x); x = x + 30;
        pdf.text("File Size: "+file.size, 40, 40 + x); x = x + 45;
        pdf.setFont("helvetica", "bold");
        pdf.text("Analysis Result", 40, 40 + x); x = x + 30;
        
        // pdf.addImage(divImage, 'PNG', 40, 235, width-40, height);

        pdf.setFont("times", "normal");
        var isMalware = response.is_malware;

        if(isMalware === "False") {
          pdf.text("No Malware Found", 40, 40 + x); x = x + 30;
          pdf.setFont("times", "bold");
          pdf.text("Package Name: ", 40, 40 + x);
          pdf.setFont("times", "normal");
          pdf.text(response.package, 150, 40 + x); x = x + 30;
          pdf.setFont("times", "bold");
          pdf.text("Permissions List: ", 40, 40 + x); x = x + 20;
          pdf.setFont("times", "normal");
          for(var i of response.permissions) {
            pdf.text(i, 50, 40 + x);
            x = x + 20;
            var pageHeight1 = pdf.internal.pageSize.height;
            if(x > pageHeight1 - 80) {
              x = 0;
              pdf.addPage();
            }
          }
        }

        else {
          pdf.text("Malware Found", 40, 40 + x); x = x + 30;
          if(response.package) {
            pdf.setFontSize(16);
            pdf.setFont("times", "bold");
            pdf.text("Malicious Package Found: ", 40, 40 + x);
            pdf.setFont("times", "normal");
            pdf.text(response.package, 230, 40 + x); x = x + 30;
          }

          if(response.permissions.length > 0) {
            pdf.setFont("times", "bold");
            pdf.text("Malicious Permissions Found: ", 40, 40 + x); x = x + 20;
            pdf.setFont("times", "normal");
            for(var j of response.permissions) {
              pdf.text(j, 50, 40 + x);
              x = x + 20;
            }
            x = x + 10;
          }

          if(response.combination.length > 0) {
            pdf.setFont("times", "bold");
            pdf.text("Suspicious Permissions Found: ", 40, 40 + x); x = x + 30;
            pdf.setFont("times", "normal");
            var dict = response.permission_data;
            for(var k of response.combination) {

              pdf.setFontSize(16);
              pdf.text(k, 50, 40 + x); x = x + 20;
              pdf.setFontSize(14);
              if(dict[k]) {
                var wrapWidth = 500;
                var longString2 = dict[k];
                var splitText2 = pdf.splitTextToSize(longString2, wrapWidth)
                for (var l = 0, length2 = splitText2.length; l < length2; l++) {
                  pdf.text(splitText2[l], 50, 40 + x);
                  x = x + 15;
                }
                x = x + 10;
              }
              var pageHeight2 = pdf.internal.pageSize.height;
              if(x > pageHeight2 - 80) {
                x = 0;
                pdf.addPage();
              }
            }
          }
        }
        pdf.save("report.pdf");
      // })
    };

    function List(data) {

      var dict = response.permission_data
      var arr = []
      for(var key in dict) {
        arr.push(key);
      }

      const listItems = data.data.map((data, index) => {
        return (
          <div key={index}>
            <li key={index}>
              {data}
            </li>
            {dict[data] ? <div>Description: { data === arr[index] ? <>{dict[data]}</> : null}</div> : null}
          </div>
        )
      });
      return (
        <ul>{listItems}</ul>
      );
    }

    return (
      <div className={classes.background_image}>
          <Navbar />
          <Box pt = {10}>
            <Grid
                container
                spacing={0}
                direction="column"
                alignItems="center"
                justify="center"
            >
                <div>
                    
                    <form onSubmit={handleSubmit}>
                      <Typography>Analyze suspicious apk files to detect malware.</Typography>
                        <label htmlFor="file">
                            <Input id="file" multiple type="file" className={classes.input} onChange={handleChange}/>
                            <Button variant="outlined" component="span">
                                Choose an apk file
                            </Button>  
                        </label>
                        <Button
                            type = "submit"
                            variant="contained"
                            color="default"
                            className={classes.button}
                            startIcon={<CloudUploadIcon />}
                        >
                            Upload
                        </Button>
                        {file ?   <Typography variant="subtitle1" gutterBottom>
                                      <p><strong>Filename: </strong> {file.name}</p>
                                      <p><strong>File type: </strong> {file.type}</p>
                                      <p><strong>File size: </strong> {file.size} bytes</p>
                                  </Typography> : null }
                    </form>
                </div>
                {response ? null : (loading ?  <CircularProgress color="secondary" /> : null)}
            </Grid>
          </Box>
            <Container>
              <div>
                  {response ?   <>
                                {console.log(response.package)}
                                <br />
                                <Typography variant="h5" gutterBottom style={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap',}} className = {classes.header}><AssessmentOutlinedIcon fontSize="large" style={{ paddingRight: 5,}}/>Analysis Result</Typography><hr /><br />
                                <div id="response">
                                  <Typography variant="subtitle1"> 
                                      {(response.is_malware === "True") ? <strong>MALWARE FOUND</strong> : <strong>NO THREATS FOUND</strong>}
                                      {(response.is_malware === "True" && response.package) ? <div><strong>Malicious package found: </strong>{response.package}</div> : null}
                                      {(response.is_malware === "True" && response.permissions.length > 0) ? <><div><strong>Malicious permissions found: </strong></div><List data = {response.permissions}/></>: null}
                                      {(response.is_malware === "True" && response.combination.length > 0) ? <><div><strong>Suspicious permissions found: </strong></div><List data = {response.combination}/></>: null}
                                      {(response.is_malware === "False" && response.package) ? <div><strong>Package Name: </strong>{response.package}</div> : null}
                                      {(response.is_malware === "False" && response.permissions.length > 0) ? <><div><strong>Permissions List: </strong></div><List data = {response.permissions} /></> : null}
                                  </Typography>
                                </div>
                              </>
                            : null
                  }
              
                  {response ? <>
                                <Box pb = {5}>
                                  <Button
                                    type = "submit"
                                    variant="contained"
                                    color="default"
                                    className={classes.button}
                                    startIcon={<GetAppIcon />}
                                    onClick={generatePDF}
                                  >
                                    Download PDF
                                  </Button>
                                </Box>
                                {(response.last_result.length>0) ?
                                    <div>
                                      <Typography variant="h5" className = {classes.header}>Previous Scan Results</Typography><hr /><br />
                                      {(response.last_scanned.length>0) ? <><div><strong>Last Scanned: </strong>{(response.last_scanned[0]).substring(0, 10)} at {(response.last_scanned[0]).substring(10, 16)}</div></> : null}
                                      {(response.last_result.length>0) ? <><div><strong>Last Scan's Result: </strong>{String(response.last_result[0])}</div></> : null}
                                      <BasicTable last_scanned = {response.last_scanned}  last_result = {response.last_result}/>
                                      <br /><br />
                                    </div>
                                    : null } 
                                    
                              </>  : null }
                              
              </div>
            </Container>
      </div>
    );
}

export default Dashboard;